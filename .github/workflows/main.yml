name: Push Webhook (branch, commit, user)

on:
  push:
    branches:
      - '**'       # todas las ramas
  workflow_dispatch:

concurrency:
  group: push-webhook
  cancel-in-progress: true

jobs:
  notify:
    if: github.ref_name != 'bk'  # ⛔ no ejecutar en main
    runs-on: ubuntu-latest
    env:
      TARGET_URL: ${{ secrets.WEBHOOK_URL }}
      MAX_ATTEMPTS: '3'
      BACKOFF_SECONDS: '2'
      FAIL_ON_ERROR: 'true'
    steps:
      - name: Build payload and POST (raw JSON, debug & HTTP status check)
        shell: bash
        run: |
          set -euo pipefail

          REPO="${{ github.event.repository.name }}"
          OWNER="${{ github.repository_owner }}"
          FULL_REPO="${OWNER}/${REPO}"
          REF="${{ github.ref }}"
          BRANCH="${{ github.ref_name }}"
          SHA="${{ github.sha }}"
          ACTOR="${{ github.actor }}"
          COMMIT_MSG="${{ github.event.head_commit.message || '' }}"
          COMMIT_AUTHOR_NAME="${{ github.event.head_commit.author.name || '' }}"
          COMMIT_AUTHOR_EMAIL="${{ github.event.head_commit.author.email || '' }}"
          COMMIT_URL="https://github.com/${FULL_REPO}/commit/${SHA}"

          PAYLOAD="$(jq -n \
            --arg repo "$REPO" \
            --arg owner "$OWNER" \
            --arg full "$FULL_REPO" \
            --arg ref "$REF" \
            --arg branch "$BRANCH" \
            --arg sha "$SHA" \
            --arg url "$COMMIT_URL" \
            --arg msg "$COMMIT_MSG" \
            --arg an "$COMMIT_AUTHOR_NAME" \
            --arg ae "$COMMIT_AUTHOR_EMAIL" \
            --arg actor "$ACTOR" \
            '{
              repository: { name: $repo, owner: $owner, full_name: $full },
              ref: $ref,
              branch: $branch,
              commit: {
                sha: $sha,
                url: $url,
                message: $msg,
                author: { name: $an, email: $ae }
              },
              actor: $actor
            }'
          )"

          echo "Repo: ${FULL_REPO} | Rama: ${BRANCH} | SHA: ${SHA}"
          echo "== Payload =="
          echo "$PAYLOAD" | jq .
          echo "$PAYLOAD" > payload.json

          attempt=1
          ok=false
          while [ "$attempt" -le "${MAX_ATTEMPTS}" ]; do
            echo "== POST intento $attempt/${MAX_ATTEMPTS} =="
            echo "curl -X POST \"$TARGET_URL\" -H 'Content-Type: application/json' --data-binary @payload.json"

            HTTP_CODE=$(curl -sS -o response.json -w "%{http_code}" \
              -X POST "$TARGET_URL" \
              -H "Content-Type: application/json" \
              --data-binary "@payload.json" || echo "000")

            echo "HTTP: $HTTP_CODE"
            echo "Body:"
            cat response.json || echo "(sin cuerpo)"

            if [[ "$HTTP_CODE" =~ ^2[0-9]{2}$ ]]; then
              ok=true
              echo "✅ Webhook enviado correctamente."
              break
            else
              echo "::error::Webhook devolvió HTTP $HTTP_CODE en intento $attempt"
              attempt=$((attempt+1))
              sleep "${BACKOFF_SECONDS}"
            fi
          done

          if [ "$ok" != "true" ]; then
            echo "❌ No se pudo enviar el webhook (HTTP $HTTP_CODE)."
            if [ "${FAIL_ON_ERROR}" = "true" ]; then exit 1; fi
            echo "::warning::Continuando sin fallar el job (FAIL_ON_ERROR=false)."
          fi
